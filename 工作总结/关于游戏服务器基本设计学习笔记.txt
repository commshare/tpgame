关于MMORPG游戏同步设计案:
1.方案1  （当前服务器设计）   
    1). 客户端A发送行走路径到服务器。
    2). 服务器对当前路径进行判断处理。
    3). 当消息达到移动验证次数后进行一次预测判断处理。
    4). 服务器给客户端A附近的玩家B等发送移动消息。
    5). 客户端B由于一些网络延迟，会进行一些逻辑处理。
	处理方式:
	A。首先客户端B会接受服务器发来A的当前路径坐标，然后把此坐标进行一次累加 偏移与随机。
		float  xCurr = pMsg->GetShort() + 0.3f + (random(5)/10.0);
		float  yCurr = pMsg->GetShort() + 0.3f + (random(5)/10.0);
	B。然后把当前的计算坐标xCurr,yCurr与玩家B视野中客户端A的上次缓存坐标进行对于修正，
	   如果大于5则设置为新坐标，否则设置玩家A的设置的方向与坐标。

2.方案2
    	


关于MMORPG游戏场景管理设计方式:


1.CGUID 游戏唯一ID标识符.
2.CArea区域  CServerRegion服务器场景 Region场景

3.CRegion   一个场景类，包括此场景的所有信息
  1) 地图属性
  2) 阻挡类型
  3) 安全区定义
  4) 切换点类型


4.CServerRegion  继承与CRegion类,主要管理当前场景的所有Shape
  1) 把场景划分为N*N个CArea,然后管理每一个CArea
  2) 管理场景的Monster刷新，删除频率.

5.CArea 一个2维数组表示一个场景某个区域。
  1) 区域里面包括所有的Shape（ OBject ）

class CServerRegion : Pubic  CRegion
{
	
};


关于MMORPG的网络库设计
 